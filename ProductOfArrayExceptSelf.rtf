{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\
\'a0\
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\
\'a0\
You must write an algorithm that runs in O(n) time and without using the division operation.\
\'a0\
\'a0\
\'a0\
Example 1:\
\'a0\
Input: nums = [1,2,3,4]\
Output: [24,12,8,6]\
Example 2:\
\'a0\
Input: nums = [-1,1,0,-3,3]\
Output: [0,0,9,0,0]\
\'a0\
\'a0\
Constraints:\
\'a0\
2 <= nums.length <= 105\
-30 <= nums[i] <= 30\
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\
\
==========================================================\
\
\
class Solution \{\
\'a0\'a0\'a0 public int[] productExceptSelf(int[] nums) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int[] leftPrefix = new int[nums.length];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int[] rightPrefix = new int[nums.length];\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 leftPrefix[0] = 1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(int i = 1; i < nums.length; i++)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 leftPrefix[i] = nums[i-1] * leftPrefix[i-1];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 rightPrefix[nums.length - 1] = 1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(int j = nums.length-2; j >= 0; j--)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 rightPrefix[j] = nums[j+1] * rightPrefix[j+1];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int[] answer = new int[nums.length];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(int i = 0; i < nums.length; i++)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 answer[i] = leftPrefix[i] * rightPrefix[i];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return answer;\
\'a0\'a0\'a0 \}\
\}\
}