{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
Given an array of strings strs, group the anagrams together. You can return the answer in any order.\
\'a0\
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\
\'a0\
\'a0\
\'a0\
Example 1:\
\'a0\
Input: strs = ["eat","tea","tan","ate","nat","bat"]\
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]\
Example 2:\
\'a0\
Input: strs = [""]\
Output: [[""]]\
Example 3:\
\'a0\
Input: strs = ["a"]\
Output: [["a"]]\
\'a0\
\'a0\
Constraints:\
\'a0\
1 <= strs.length <= 104\
0 <= strs[i].length <= 100\
strs[i] consists of lowercase English letters.\
\
============================================================\
\
class Solution \{\
\'a0\
\'a0\'a0\'a0 public List<List<String>> groupAnagrams(String[] strs) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Map<String, List<String>> map = new HashMap<>();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(int i = 0; i < strs.length; i++)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 char[] unsortedStr = strs[i].toCharArray();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Arrays.sort(unsortedStr);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 String sortedStr = String.valueOf(unsortedStr);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(!map.containsKey(sortedStr))\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 map.put(sortedStr, new ArrayList());\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 map.get(sortedStr).add(strs[i]);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return new ArrayList<>(map.values());\
\'a0\'a0\'a0 \}\
\}\
}