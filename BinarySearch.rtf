{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15180\viewh9800\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\
\'a0\
You must write an algorithm with O(log n) runtime complexity.\
\'a0\
\'a0\
\'a0\
Example 1:\
\'a0\
Input: nums = [-1,0,3,5,9,12], target = 9\
Output: 4\
Explanation: 9 exists in nums and its index is 4\
Example 2:\
\'a0\
Input: nums = [-1,0,3,5,9,12], target = 2\
Output: -1\
Explanation: 2 does not exist in nums so return -1\
\'a0\
\'a0\
Constraints:\
\'a0\
1 <= nums.length <= 104\
-104 < nums[i], target < 104\
All the integers in nums are unique.\
nums is sorted in ascending order.\
\
\
=================================================================================\
\
class Solution \{\
\'a0\
\'a0\'a0\'a0 public int search(int[] nums, int target) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int left = 0;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int right = nums.length-1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int mid;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 while(left<=right)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 mid = (left+right)/2;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(nums[mid] == target)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return mid;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(nums[mid] < target)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 left = mid+1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \} else \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 right = mid-1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return -1;\
\'a0\'a0\'a0 \}\
\}\
}