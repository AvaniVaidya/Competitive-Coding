{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21080\viewh13780\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\
\'a0\
Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\
\'a0\
The tests are generated such that there is exactly one solution. You may not use the same element twice.\
\'a0\
Your solution must use only constant extra space.\
\'a0\
\'a0\
\'a0\
Example 1:\
\'a0\
Input: numbers = [2,7,11,15], target = 9\
Output: [1,2]\
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\
Example 2:\
\'a0\
Input: numbers = [2,3,4], target = 6\
Output: [1,3]\
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\
Example 3:\
\'a0\
Input: numbers = [-1,0], target = -1\
Output: [1,2]\
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\
\'a0\
\'a0\
Constraints:\
\'a0\
2 <= numbers.length <= 3 * 104\
-1000 <= numbers[i] <= 1000\
numbers is sorted in non-decreasing order.\
-1000 <= target <= 1000\
The tests are generated such that there is exactly one solution.\
\
=============================================================\
\
2 ms - beats 91% - Recursion brute force\
\
class Solution \{\
\'a0\
\'a0\'a0\'a0 public int findTarget(int[] numbers, int num2, int index)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(index == numbers.length)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return -1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(numbers[index] == num2)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return index;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return findTarget(numbers, num2, index+1);\
\'a0\'a0\'a0 \}\
\'a0\
\'a0\'a0\'a0 public int[] twoSum(int[] numbers, int target) \{\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int num1, num2, j;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int i = 0;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int ind[] = new int[2];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 while(i < numbers.length)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 while(i > 0 && numbers[i] == numbers[i-1])\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 i++;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 num1 = numbers[i];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 num2 = target - num1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 j = findTarget(numbers, num2, i+1);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ind[0] = i+1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(j != -1)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ind[1] = j+1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return ind;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 i++;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ind[1] = -1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return ind;\
\'a0\'a0\'a0 \}\
\}\
\
=============================================================\
\
\pard\pardeftab720\partightenfactor0
\cf2 2 ms - beats 91% - Two pointers approach\
\
class Solution \{\
\'a0\'a0\'a0 public int[] twoSum(int[] numbers, int target) \{\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int left = 0;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int right = numbers.length - 1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int sum;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int ind[] = new int[2];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 while(left < right)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 sum = numbers[left] + numbers[right];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(sum == target)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ind[0] = left+1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ind[1] = right+1;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return ind;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(sum < target)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 left++;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 else\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 right--;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return ind;\
\'a0\'a0\'a0 \}\
\}\
}