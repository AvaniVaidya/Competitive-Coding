{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\
\'a0\
In other words, return true if one of s1's permutations is the substring of s2.\
\'a0\
\'a0\
\'a0\
Example 1:\
\'a0\
Input: s1 = "ab", s2 = "eidbaooo"\
Output: true\
Explanation: s2 contains one permutation of s1 ("ba").\
Example 2:\
\'a0\
Input: s1 = "ab", s2 = "eidboaoo"\
Output: false\
\'a0\
\'a0\
Constraints:\
\'a0\
1 <= s1.length, s2.length <= 104\
s1 and s2 consist of lowercase English letters.\
\
===========================================================\
\
class Solution \{\
\'a0\
\'a0\'a0\'a0 public boolean countFreq(String s1, String currSubstr)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int[] freq1 = new int[26];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int[] freq2 = new int[26];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Arrays.fill(freq1, 0);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Arrays.fill(freq2, 0);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(char x : s1.toCharArray())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 freq1[x - 'a']++; \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(char x : currSubstr.toCharArray())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 freq2[x - 'a']++;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(int i = 0; i < 26; i++)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(freq1[i] != freq2[i])\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return false;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return true;\
\'a0\'a0\'a0 \}\
\'a0\
\'a0\'a0\'a0 public boolean checkInclusion(String s1, String s2) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int s1Len = s1.length();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int s2Len = s2.length();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int end =\'a0 s2Len - s1Len;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(int i = 0; i <= end; i++)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 String currSubstr = s2.substring(i, i+s1Len);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 // char[] s1Arr = s1.toCharArray();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 // char[] currSubstrArr = currSubstr.toCharArray();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 // Arrays.sort(s1Arr);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 // Arrays.sort(currSubstrArr);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 // if(String.valueOf(s1Arr).equalsIgnoreCase(String.valueOf(currSubstrArr)))\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 //\'a0\'a0\'a0\'a0 return true;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 // \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(countFreq(s1, currSubstr))\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return true;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return false;\
\'a0\'a0\'a0 \}\
\}\
}