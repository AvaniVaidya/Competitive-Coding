{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
Given two strings s and t, return true if t is an anagram of s, and false otherwise.\
\'a0\
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\
\'a0\
\'a0\
\'a0\
Example 1:\
\'a0\
Input: s = "anagram", t = "nagaram"\
Output: true\
Example 2:\
\'a0\
Input: s = "rat", t = "car"\
Output: false\
\'a0\
\'a0\
Constraints:\
\'a0\
1 <= s.length, t.length <= 5 * 104\
s and t consist of lowercase English letters.\
\'a0\
\'a0\
Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?\
\
==========================================================\
\
class Solution \{\
\'a0\'a0\'a0 public boolean isAnagram(String s, String t) \{\
\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 int[] charr = new int[26];\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(char x : s.toCharArray())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 charr[x - 'a']++;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(char x : t.toCharArray())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 charr[x - 'a']--;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(int val : charr)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(val != 0)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return false;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return true;\
\'a0\'a0\'a0 \}\
\}\
}