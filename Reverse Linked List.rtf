{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
Given the head of a singly linked list, reverse the list, and return the reversed list.\
\'a0\
\'a0\
\'a0\
Example 1:\
\'a0\
\'a0\
Input: head = [1,2,3,4,5]\
Output: [5,4,3,2,1]\
Example 2:\
\'a0\
\'a0\
Input: head = [1,2]\
Output: [2,1]\
Example 3:\
\'a0\
Input: head = []\
Output: []\
\'a0\
\'a0\
Constraints:\
\'a0\
The number of nodes in the list is the range [0, 5000].\
-5000 <= Node.val <= 5000\
\
\
=============================================================\
\
class Solution \{\
\'a0\'a0\'a0 public ListNode reverseList(ListNode head) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(head == null)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return null;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(head.next == null)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return head;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ListNode prev = head;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ListNode ptr = head.next;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ListNode next;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 prev.next = null;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 while(ptr.next != null)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 next = ptr.next;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ptr.next = prev;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 prev = ptr;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ptr = next;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ptr.next = prev;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return ptr;\
\'a0\'a0\'a0 \}\
\}\
}